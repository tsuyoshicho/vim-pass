*pass.txt*	a summary

Version :
Author  : Tsuyoshi CHO <Tsuyoshi.CHO+develop@Gmail.com>
License : MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

==============================================================================
CONTENTS					*pass-contents*

INTRODUCTION			|pass-introduction|
USAGE				|pass-usage|
INTERFACE			|pass-interface|
  VARIABLES			  |pass-variables|
  COMMANDS			  |pass-commands|
  FUNCTIONS			  |pass-functions|
TODO				|pass-todo|
CHANGELOG			|pass-changelog|


==============================================================================
INTRODUCTION					*pass-introduction*

*pass* is Vim plugin aimed at the Vim password-store API.
see below
Pass: The Standard Unix Password Manager - https://www.passwordstore.org/

Currenlty get support. usable like `auth-source` at emacs.

Latest version:
https://github.com/tsuyoshicho/pass.vim

==============================================================================
USAGE						*pass-usage*

Password and other setup.
>
 " in vimrc
 " configured at end of vim startup
 call pass#get_startup('g:test_gh_token','Develop/Github')
 call pass#get_startup('g:test_gh_username','Develop/Github','username')

 function! test() abort
   let password = pass#get('Service/foobar')
   " ...
 endfunction
<

Plugin password and other setup.
>
 # in plugin setting(dein's toml)
 [[plugins]]
 repo = 'tsuyoshicho/vim-pass'

 [[plugins]] # https://pixe.la/
 repo = 'mattn/vim-pixela'
 depends = ['open-browser.vim','vim-pass']
 hook_add = '''
   " let g:pixela_username = 'user'
   " let g:pixela_token    = 'token'

   call pass#get_startup('g:pixela_username','Develop/Pixela','username')
   " VimPixela work OK
   call pass#get_startup('g:pixela_token','Develop/Pixela')
   " startup-time countup not work
 '''

 [[plugins]] # Slack
 repo = 'mizukmb/slackstatus.vim'
 depends = ['webapi-vim','vim-pass']
 hook_add = '''
   " let g:slackstatus_token = '<YOUR_SLACK_TOKEN>'
   " team m-falcon
   call pass#get_startup('g:slackstatus_token','Message/Slack/myhoge.legacy')
   " vim-jp
   " call pass#get_startup('g:slackstatus_token','Message/Slack/vim-jp.legacy')
   "
   function! s:slack_list(A,L,P) abort
     let slacklist = ['myhoge','vim-jp']
     return slacklist
   endfunction

   function s:slackstatus_change_token(team) abort
     let path = 'Message/Slack/' . a:team . '.legacy'
     let g:slackstatus_token = pass#get(path)
   endfunction

   command! -nargs=1 -complete=customlist,<SID>slack_list SlackStatusChange :call <SID>slackstatus_change_token(<f-args>)
 '''
<



==============================================================================
INTERFACE					*pass-interface*

------------------------------------------------------------------------------
VARIABLES					*pass-variables*

g:pass_store_path				*g:pass_store_path*
	default value: "~/.password-store"

Store path as password-store like saved data.

g:pass_gpg_path					*g:pass_gpg_path*
	default value: "gpg"

gpg(gnupg) execution path.
Simply, command name write.

g:pass_use_agent				*g:pass_use_agent*
	default value: 1 (0 remote connection foce set)

Usable gpg-agent setting.
1 as passphrase request use gpg-agent's pinentry;
0 as passphrase request on Vim

------------------------------------------------------------------------------
COMMANDS					*pass-commands*

:PassGet {} ...					*:PassGet*

Password check command, password-store entry name set to arg .
You can specify the item name as the 2nd arg.

:PassGetRegister {} ...				*:PassGetRegister*

Password save ad register command, password-store entry name set to arg .
Currently not work.
You can specify the item name as the 2nd arg.

------------------------------------------------------------------------------
FUNCTIONS					*pass-functions*

pass#get({entry}, {...})			*pass#get()*

Password get API, return value.
entry is password-store style.
Optionally item name.

pass#get_register({entry}, {...})		*pass#get_register()*

Password get API, value set to register.
entry is password-store style.
Optionally item name.
Currently not work.
It will disappear from the register as time passes.

						*pass#get_startup()*
pass#get_startup({set-variable},{entry}, {...})

Password get API, startup specific; value set to set-variable
entry is password-store style.
Optionally item name.

pass#resolve_startup()				*pass#resolve_startup()*

Use at autocmd specific function.
Resolve get_startup process at startup time.

==============================================================================
TODO						*pass-todo*

see Ja help.

==============================================================================
CHANGELOG					*pass-changelog*

see gitlog

==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:
